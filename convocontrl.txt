CONVOCONTRL (php artisan make:contrller ConversationController)
copy-paste the code in the ConversationController.php
==================
<?php

namespace App\Http\Controllers;

use App\Models\Conversation;
use App\Models\Message;
use App\Models\UUser;
use App\Models\SuperAdmin;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Facades\DB;
use Exception;

class ConversationController extends Controller
{
    /**
     * Get all conversations for the authenticated user
     */
    public function getConversations(Request $request)
    {
        try {
            $user = $request->user();
            $userType = $this->getUserType($user);
            
            $conversations = Conversation::forUser($user->id, $userType)
                ->with(['lastMessage'])
                ->orderBy('last_message_at', 'desc')
                ->get();
            
            // Add user info and unread count to conversations
            $conversations->map(function($conversation) use ($user, $userType) {
                // Determine the other user in the conversation
                if ($conversation->initiator_id == $user->id && $conversation->initiator_type == $userType) {
                    $otherUser = $this->getUser($conversation->receiver_id, $conversation->receiver_type);
                    $conversation->other_user = $otherUser;
                } else {
                    $otherUser = $this->getUser($conversation->initiator_id, $conversation->initiator_type);
                    $conversation->other_user = $otherUser;
                }
                
                // Add unread count
                $conversation->unread_count = $conversation->unreadMessagesCount($user->id, $userType);
                
                return $conversation;
            });
            
            return response()->json([
                'status' => 'success',
                'data' => $conversations
            ]);
        } catch (Exception $e) {
            return response()->json([
                'status' => 'error',
                'message' => 'Failed to fetch conversations',
                'error' => $e->getMessage()
            ], 500);
        }
    }

    /**
     * Get or create a conversation with another user
     */
    public function getOrCreateConversation(Request $request)
    {
        try {
            $validator = Validator::make($request->all(), [
                'user_id' => 'required|integer',
                'user_type' => 'required|in:user,superadmin',
            ]);

            if ($validator->fails()) {
                return response()->json([
                    'status' => 'error',
                    'message' => 'Validation failed',
                    'errors' => $validator->errors()
                ], 422);
            }

            $currentUser = $request->user();
            $currentUserType = $this->getUserType($currentUser);
            $otherUserId = $request->user_id;
            $otherUserType = $request->user_type;

            // Check if other user exists
            $otherUser = $this->getUser($otherUserId, $otherUserType);
            if (!$otherUser) {
                return response()->json([
                    'status' => 'error',
                    'message' => 'User not found'
                ], 404);
            }

            // Try to find existing conversation
            $conversation = Conversation::where(function($query) use ($currentUser, $currentUserType, $otherUserId, $otherUserType) {
                $query->where('initiator_id', $currentUser->id)
                      ->where('initiator_type', $currentUserType)
                      ->where('receiver_id', $otherUserId)
                      ->where('receiver_type', $otherUserType);
            })->orWhere(function($query) use ($currentUser, $currentUserType, $otherUserId, $otherUserType) {
                $query->where('initiator_id', $otherUserId)
                      ->where('initiator_type', $otherUserType)
                      ->where('receiver_id', $currentUser->id)
                      ->where('receiver_type', $currentUserType);
            })->first();

            // If no conversation exists, create one
            if (!$conversation) {
                $conversation = Conversation::create([
                    'initiator_id' => $currentUser->id,
                    'initiator_type' => $currentUserType,
                    'receiver_id' => $otherUserId,
                    'receiver_type' => $otherUserType,
                    'last_message_at' => now()
                ]);
            }

            // Load messages
            $messages = $conversation->messages;
            
            // Mark messages as read
            $conversation->messages()
                ->where('sender_id', '!=', $currentUser->id)
                ->where('sender_type', '!=', $currentUserType)
                ->where('is_read', false)
                ->update(['is_read' => true]);
            
            // Add user info
            $conversation->other_user = $otherUser;
            $conversation->unread_count = 0; // We just marked them as read

            return response()->json([
                'status' => 'success',
                'data' => [
                    'conversation' => $conversation,
                    'messages' => $messages,
                    'other_user' => $otherUser
                ]
            ]);
        } catch (Exception $e) {
            return response()->json([
                'status' => 'error',
                'message' => 'Failed to get or create conversation',
                'error' => $e->getMessage()
            ], 500);
        }
    }

 /**
     * Send a message
     */
    public function sendMessage(Request $request)
    {
        try {
            DB::beginTransaction();
            
            $validator = Validator::make($request->all(), [
                'conversation_id' => 'required|integer|exists:conversations,id',
                'message' => 'required_without:attachment|string|nullable',
                'attachment' => 'nullable|file|max:10240', // 10MB max
            ]);

            if ($validator->fails()) {
                return response()->json([
                    'status' => 'error',
                    'message' => 'Validation failed',
                    'errors' => $validator->errors()
                ], 422);
            }

            $currentUser = $request->user();
            $currentUserType = $this->getUserType($currentUser);
            $conversationId = $request->conversation_id;

            // Get conversation and check if user is part of it
            $conversation = Conversation::where('id', $conversationId)
                ->where(function($query) use ($currentUser, $currentUserType) {
                    $query->where('initiator_id', $currentUser->id)
                          ->where('initiator_type', $currentUserType)
                          ->orWhere(function($q) use ($currentUser, $currentUserType) {
                              $q->where('receiver_id', $currentUser->id)
                                ->where('receiver_type', $currentUserType);
                          });
                })->first();

            if (!$conversation) {
                return response()->json([
                    'status' => 'error',
                    'message' => 'Conversation not found or you are not a participant'
                ], 404);
            }

            // Handle attachment
            $attachmentPath = null;
            $attachmentType = null;
            $attachmentName = null;
            
            if ($request->hasFile('attachment')) {
                $attachment = $request->file('attachment');
                $extension = $attachment->getClientOriginalExtension();
                $attachmentName = $attachment->getClientOriginalName();
                
                // Determine attachment type
                $fileType = $this->getFileType($extension);
                $attachmentType = $fileType;
                
                // Store file
                $attachmentPath = $attachment->store('attachments', 'public');
            }

            // Create message
            $message = Message::create([
                'conversation_id' => $conversationId,
                'sender_id' => $currentUser->id,
                'sender_type' => $currentUserType,
                'message' => $request->message,
                'attachment' => $attachmentPath,
                'attachment_type' => $attachmentType,
                'attachment_name' => $attachmentName,
                'is_read' => false
            ]);

            // Update conversation last message time
            $conversation->last_message_at = now();
            $conversation->save();

            // Get recipient for notification
            $recipient = null;
            $recipientType = null;
            
            if ($conversation->initiator_id == $currentUser->id && $conversation->initiator_type == $currentUserType) {
                $recipient = $conversation->receiver_id;
                $recipientType = $conversation->receiver_type;
            } else {
                $recipient = $conversation->initiator_id;
                $recipientType = $conversation->initiator_type;
            }

            // Broadcast event for real-time update
            event(new \App\Events\NewMessage($message, $recipient, $recipientType));
            
            DB::commit();
            
            // Load the message with relationships
            $message->load('sender');
            
            // Add attachment URL if exists
            if ($message->attachment) {
                $message->attachment_path = $message->attachment_path;
            }
            
            return response()->json([
                'status' => 'success',
                'message' => 'Message sent successfully',
                'data' => $message
            ]);
        } catch (Exception $e) {
            DB::rollBack();
            
            return response()->json([
                'status' => 'error',
                'message' => 'Failed to send message',
                'error' => $e->getMessage()
            ], 500);
        }
    }

    /**
     * Mark messages as read
     */
    public function markAsRead(Request $request)
    {
        try {
            $validator = Validator::make($request->all(), [
                'conversation_id' => 'required|integer|exists:conversations,id',
            ]);

            if ($validator->fails()) {
                return response()->json([
                    'status' => 'error',
                    'message' => 'Validation failed',
                    'errors' => $validator->errors()
                ], 422);
            }

            $currentUser = $request->user();
            $currentUserType = $this->getUserType($currentUser);
            $conversationId = $request->conversation_id;

            // Get conversation and check if user is part of it
            $conversation = Conversation::where('id', $conversationId)
                ->where(function($query) use ($currentUser, $currentUserType) {
                    $query->where('initiator_id', $currentUser->id)
                          ->where('initiator_type', $currentUserType)
                          ->orWhere(function($q) use ($currentUser, $currentUserType) {
                              $q->where('receiver_id', $currentUser->id)
                                ->where('receiver_type', $currentUserType);
                          });
                })->first();

            if (!$conversation) {
                return response()->json([
                    'status' => 'error',
                    'message' => 'Conversation not found or you are not a participant'
                ], 404);
            }

            // Mark messages as read
            $updatedCount = $conversation->messages()
                ->where('sender_id', '!=', $currentUser->id)
                ->where('sender_type', '!=', $currentUserType)
                ->where('is_read', false)
                ->update(['is_read' => true]);

            return response()->json([
                'status' => 'success',
                'message' => 'Messages marked as read',
                'data' => [
                    'updated_count' => $updatedCount
                ]
            ]);
        } catch (Exception $e) {
            return response()->json([
                'status' => 'error',
                'message' => 'Failed to mark messages as read',
                'error' => $e->getMessage()
            ], 500);
        }
    }

    /**
     * Helper method to determine user type
     */
    private function getUserType($user)
    {
        if ($user instanceof UUser) {
            return 'user';
        } elseif ($user instanceof SuperAdmin) {
            return 'superadmin';
        }
        
        return null;
    }

    /**
     * Helper method to get user by id and type
     */
    private function getUser($userId, $userType)
    {
        if ($userType === 'user') {
            return UUser::find($userId);
        } elseif ($userType === 'superadmin') {
            return SuperAdmin::find($userId);
        }
        
        return null;
    }

    /**
     * Helper method to determine file type
     */
    private function getFileType($extension)
    {
        $extension = strtolower($extension);
        
        $imageTypes = ['jpg', 'jpeg', 'png', 'gif', 'svg', 'webp'];
        $documentTypes = ['pdf', 'doc', 'docx', 'xls', 'xlsx', 'ppt', 'pptx', 'txt', 'csv'];
        $videoTypes = ['mp4', 'avi', 'mov', 'wmv', 'flv', 'mkv'];
        $audioTypes = ['mp3', 'wav', 'ogg', 'aac'];
        
        if (in_array($extension, $imageTypes)) {
            return 'image';
        } elseif (in_array($extension, $documentTypes)) {
            return 'document';
        } elseif (in_array($extension, $videoTypes)) {
            return 'video';
        } elseif (in_array($extension, $audioTypes)) {
            return 'audio';
        }
        
        return 'file';
    }
}




ENV
=============
APP_NAME=Laravel
APP_ENV=local
APP_KEY=base64:VNT+CWfymYag0FVMmfW+OxdNKeoYiM+t8AHdZU2+aU8=
APP_DEBUG=true
APP_URL=http://localhost

LOG_CHANNEL=stack
LOG_DEPRECATIONS_CHANNEL=null
LOG_LEVEL=debug

DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=lara1
DB_USERNAME=root
DB_PASSWORD=

BROADCAST_DRIVER=log
CACHE_DRIVER=file
FILESYSTEM_DISK=local
QUEUE_CONNECTION=redis
SESSION_DRIVER=file
SESSION_LIFETIME=120

MEMCACHED_HOST=127.0.0.1

REDIS_HOST=127.0.0.1
REDIS_PASSWORD=null
REDIS_PORT=6379

MAIL_MAILER=smtp
MAIL_HOST=smtp.gmail.com
MAIL_PORT=587
MAIL_USERNAME=yonshhai@gmail.com
MAIL_PASSWORD="gaki wxew gpgb ufol"
MAIL_ENCRYPTION=tls
MAIL_FROM_ADDRESS=yonshhai@gmail.com
MAIL_FROM_NAME="${APP_NAME}"

AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
AWS_DEFAULT_REGION=us-east-1
AWS_BUCKET=
AWS_USE_PATH_STYLE_ENDPOINT=false

BROADCAST_DRIVER=pusher
PUSHER_APP_ID=myapp123
PUSHER_APP_KEY=messaging-app-key
PUSHER_APP_SECRET=25f749d8e8562ac1234abcd
PUSHER_APP_CLUSTER=mt1

LARAVEL_ECHO_SERVER_HOST=127.0.0.1
LARAVEL_ECHO_SERVER_PORT=6001

VITE_APP_NAME="${APP_NAME}"
VITE_PUSHER_APP_KEY="${PUSHER_APP_KEY}"
VITE_PUSHER_HOST="${PUSHER_HOST}"
VITE_PUSHER_PORT="${PUSHER_PORT}"
VITE_PUSHER_SCHEME="${PUSHER_SCHEME}"
VITE_PUSHER_APP_CLUSTER="${PUSHER_APP_CLUSTER}"


REACT_APP_API_URL=http://localhost:8000/api





RUN
=============
laravel: php artisan storage:link
laravel: php artisan queue:work

react: composer require predis/predis
react: laravel-echo-server start


INSTALL REDIS
=============
install redis to the https://github.com/tporadowski/redis/releases
- Redis-x64-5.0.14.1.msi





CREATE DATABASE IN MYSQL NAMED "lara1"  
copy paste this in sql
============
-- phpMyAdmin SQL Dump
-- version 5.2.1
-- https://www.phpmyadmin.net/
--
-- Host: 127.0.0.1
-- Generation Time: Mar 18, 2025 at 09:52 PM
-- Server version: 10.4.32-MariaDB
-- PHP Version: 8.2.12

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `lara1`
--

-- --------------------------------------------------------

--
-- Table structure for table `conversations`
--

CREATE TABLE `conversations` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `initiator_id` bigint(20) UNSIGNED NOT NULL,
  `initiator_type` varchar(255) NOT NULL,
  `receiver_id` bigint(20) UNSIGNED NOT NULL,
  `receiver_type` varchar(255) NOT NULL,
  `last_message_at` timestamp NULL DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `conversations`
--

INSERT INTO `conversations` (`id`, `initiator_id`, `initiator_type`, `receiver_id`, `receiver_type`, `last_message_at`, `created_at`, `updated_at`) VALUES
(1, 1, 'user', 1, 'superadmin', '2025-03-18 11:16:33', '2025-03-18 11:46:33', '2025-03-18 11:46:33'),
(2, 2, 'user', 1, 'superadmin', '2025-03-18 12:02:18', '2025-03-18 11:46:33', '2025-03-18 12:02:18'),
(3, 1, 'user', 2, 'user', '2025-03-17 11:46:33', '2025-03-18 11:46:33', '2025-03-18 11:46:33');

-- --------------------------------------------------------

--
-- Table structure for table `failed_jobs`
--

CREATE TABLE `failed_jobs` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `uuid` varchar(255) NOT NULL,
  `connection` text NOT NULL,
  `queue` text NOT NULL,
  `payload` longtext NOT NULL,
  `exception` longtext NOT NULL,
  `failed_at` timestamp NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `messages`
--

CREATE TABLE `messages` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `conversation_id` bigint(20) UNSIGNED NOT NULL,
  `sender_id` bigint(20) UNSIGNED NOT NULL,
  `sender_type` varchar(255) NOT NULL,
  `message` text DEFAULT NULL,
  `is_read` tinyint(1) NOT NULL DEFAULT 0,
  `attachment` varchar(255) DEFAULT NULL,
  `attachment_type` varchar(255) DEFAULT NULL,
  `attachment_name` varchar(255) DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `messages`
--

INSERT INTO `messages` (`id`, `conversation_id`, `sender_id`, `sender_type`, `message`, `is_read`, `attachment`, `attachment_type`, `attachment_name`, `created_at`, `updated_at`) VALUES
(1, 1, 1, 'user', 'Hello Admin, I need help with my account.', 1, NULL, NULL, NULL, '2025-03-18 09:46:33', '2025-03-18 11:46:33'),
(2, 1, 1, 'superadmin', 'Sure, I\'d be happy to help. What seems to be the problem?', 1, NULL, NULL, NULL, '2025-03-18 10:01:33', '2025-03-18 11:46:33'),
(3, 1, 1, 'user', 'I cannot access my dashboard.', 1, NULL, NULL, NULL, '2025-03-18 10:16:33', '2025-03-18 11:46:33'),
(4, 1, 1, 'superadmin', 'Let me check your account permissions. Give me a moment.', 1, NULL, NULL, NULL, '2025-03-18 10:46:33', '2025-03-18 11:46:33'),
(5, 1, 1, 'user', 'Thank you. I\'ll wait for your response.', 0, NULL, NULL, NULL, '2025-03-18 11:16:33', '2025-03-18 11:46:33'),
(6, 2, 2, 'user', 'Hi there, I have a billing question.', 1, NULL, NULL, NULL, '2025-03-17 08:46:33', '2025-03-18 11:46:33'),
(7, 2, 1, 'superadmin', 'Hello! What\'s your billing question?', 1, NULL, NULL, NULL, '2025-03-17 09:46:33', '2025-03-18 11:46:33'),
(8, 2, 2, 'user', 'I was charged twice for my subscription.', 1, NULL, NULL, NULL, '2025-03-18 06:46:33', '2025-03-18 11:47:02'),
(9, 3, 1, 'user', 'Hey, how\'s it going?', 1, NULL, NULL, NULL, '2025-03-16 11:46:33', '2025-03-18 11:46:33'),
(10, 3, 2, 'user', 'Doing well! How about you?', 1, NULL, NULL, NULL, '2025-03-16 12:46:33', '2025-03-18 11:46:33'),
(11, 3, 1, 'user', 'I\'m good! Just checking out the messaging feature.', 1, NULL, NULL, NULL, '2025-03-17 11:46:33', '2025-03-18 11:46:33'),
(27, 2, 1, 'superadmin', 'qweqeasdqwe', 0, NULL, NULL, NULL, '2025-03-18 12:02:18', '2025-03-18 12:02:18');

-- --------------------------------------------------------

--
-- Table structure for table `migrations`
--

CREATE TABLE `migrations` (
  `id` int(10) UNSIGNED NOT NULL,
  `migration` varchar(255) NOT NULL,
  `batch` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `migrations`
--

INSERT INTO `migrations` (`id`, `migration`, `batch`) VALUES
(1, '2025_03_18_190036_create_messages_table', 1),
(2, '2014_10_12_000000_create_users_table', 2),
(3, '2014_10_12_100000_create_password_reset_tokens_table', 2),
(4, '2019_08_19_000000_create_failed_jobs_table', 2),
(5, '2019_12_14_000001_create_personal_access_tokens_table', 2),
(6, '2025_03_15_170443_superadmin', 2),
(7, '2025_03_15_171616_users', 2),
(8, '2025_03_15_171926_create_u_users_table', 2),
(9, '2025_03_15_172054_users', 2),
(10, '2025_03_18_024724_create_password_reset_tokens_table', 2);

-- --------------------------------------------------------

--
-- Table structure for table `password_reset_tokens`
--

CREATE TABLE `password_reset_tokens` (
  `email` varchar(255) NOT NULL,
  `token` varchar(255) NOT NULL,
  `user_type` varchar(255) NOT NULL DEFAULT 'user',
  `created_at` timestamp NULL DEFAULT NULL,
  `expires_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `personal_access_tokens`
--

CREATE TABLE `personal_access_tokens` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `tokenable_type` varchar(255) NOT NULL,
  `tokenable_id` bigint(20) UNSIGNED NOT NULL,
  `name` varchar(255) NOT NULL,
  `token` varchar(64) NOT NULL,
  `abilities` text DEFAULT NULL,
  `last_used_at` timestamp NULL DEFAULT NULL,
  `expires_at` timestamp NULL DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `personal_access_tokens`
--

INSERT INTO `personal_access_tokens` (`id`, `tokenable_type`, `tokenable_id`, `name`, `token`, `abilities`, `last_used_at`, `expires_at`, `created_at`, `updated_at`) VALUES
(1, 'App\\Models\\SuperAdmin', 1, 'AuthToken', '580c402af9b17540588aaeb9deaa7315d7e7dd2a7e9d2b0ae87e8693c688b30e', '[\"superadmin\"]', '2025-03-18 12:02:34', NULL, '2025-03-18 11:24:31', '2025-03-18 12:02:34');

-- --------------------------------------------------------

--
-- Table structure for table `super_admins`
--

CREATE TABLE `super_admins` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `name` varchar(255) NOT NULL,
  `email` varchar(255) NOT NULL,
  `phone` varchar(255) DEFAULT NULL,
  `email_verified_at` timestamp NULL DEFAULT NULL,
  `password` varchar(255) NOT NULL,
  `status` tinyint(1) NOT NULL DEFAULT 1,
  `remember_token` varchar(100) DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `super_admins`
--

INSERT INTO `super_admins` (`id`, `name`, `email`, `phone`, `email_verified_at`, `password`, `status`, `remember_token`, `created_at`, `updated_at`) VALUES
(1, 'Super Admin', 'admin@example.com', NULL, NULL, '$2y$10$zvY7TKpIaKhpuOQzDJC4NOKTdY5vgKPvWgJvdsWLCOjY7SgsBm4Ze', 1, NULL, '2025-03-18 11:20:29', '2025-03-18 11:20:29');

-- --------------------------------------------------------

--
-- Table structure for table `users`
--

CREATE TABLE `users` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `name` varchar(255) NOT NULL,
  `email` varchar(255) NOT NULL,
  `email_verified_at` timestamp NULL DEFAULT NULL,
  `password` varchar(255) NOT NULL,
  `remember_token` varchar(100) DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `u_users`
--

CREATE TABLE `u_users` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `name` varchar(255) NOT NULL,
  `email` varchar(255) NOT NULL,
  `phone` varchar(255) DEFAULT NULL,
  `address` text DEFAULT NULL,
  `email_verified_at` timestamp NULL DEFAULT NULL,
  `password` varchar(255) NOT NULL,
  `status` tinyint(1) NOT NULL DEFAULT 1,
  `remember_token` varchar(100) DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `u_users`
--

INSERT INTO `u_users` (`id`, `name`, `email`, `phone`, `address`, `email_verified_at`, `password`, `status`, `remember_token`, `created_at`, `updated_at`) VALUES
(1, 'John Doe', 'john@example.com', '1234567890', '123 Main St, New York, NY', NULL, '$2y$12$iJtst19IC7yyF.xUiJqTl.8CZ/zEn73nfchi.YktY.rj./S/v3qnG', 1, NULL, '2025-03-18 11:20:07', '2025-03-18 11:20:07'),
(2, 'Jane Smith', 'jane@example.com', '0987654321', '456 Park Ave, Boston, MA', NULL, '$2y$12$dB1ELzejRO50ANC3da0UhOqhjTeloG0xk1uXcp.wPaTph.4lpthAO', 1, NULL, '2025-03-18 11:20:08', '2025-03-18 11:20:08'),
(3, 'Robert Johnson', 'robert@example.com', '5551234567', '789 Oak Dr, San Francisco, CA', NULL, '$2y$12$QayeozHi2pfL2.CFKI99cuUx7UKQ0bojreURwDRAHP0dXQyuyHNGq', 1, NULL, '2025-03-18 11:20:08', '2025-03-18 11:20:08'),
(4, 'Sarah Williams', 'sarah@example.com', '7778889999', '321 Pine St, Seattle, WA', NULL, '$2y$12$3VjImc.JKHqPa2RPJE4gsuV/lDd3pBIHQqmLpZL/frRfU5/FvFmhG', 0, NULL, '2025-03-18 11:20:08', '2025-03-18 11:20:08'),
(5, 'Michael Brown', 'michael@example.com', '3334445555', '654 Cedar Ln, Chicago, IL', NULL, '$2y$12$8T07k6VfF/ER8bAEEK0TMeVLVAjGuw8D/2PtiIiP7FzCPQUxoA6Sm', 1, NULL, '2025-03-18 11:20:09', '2025-03-18 11:20:09');

--
-- Indexes for dumped tables
--

--
-- Indexes for table `conversations`
--
ALTER TABLE `conversations`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `failed_jobs`
--
ALTER TABLE `failed_jobs`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `failed_jobs_uuid_unique` (`uuid`);

--
-- Indexes for table `messages`
--
ALTER TABLE `messages`
  ADD PRIMARY KEY (`id`),
  ADD KEY `messages_conversation_id_foreign` (`conversation_id`);

--
-- Indexes for table `migrations`
--
ALTER TABLE `migrations`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `password_reset_tokens`
--
ALTER TABLE `password_reset_tokens`
  ADD PRIMARY KEY (`email`);

--
-- Indexes for table `personal_access_tokens`
--
ALTER TABLE `personal_access_tokens`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `personal_access_tokens_token_unique` (`token`),
  ADD KEY `personal_access_tokens_tokenable_type_tokenable_id_index` (`tokenable_type`,`tokenable_id`);

--
-- Indexes for table `super_admins`
--
ALTER TABLE `super_admins`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `super_admins_email_unique` (`email`);

--
-- Indexes for table `users`
--
ALTER TABLE `users`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `users_email_unique` (`email`);

--
-- Indexes for table `u_users`
--
ALTER TABLE `u_users`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `u_users_email_unique` (`email`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `conversations`
--
ALTER TABLE `conversations`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=4;

--
-- AUTO_INCREMENT for table `failed_jobs`
--
ALTER TABLE `failed_jobs`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `messages`
--
ALTER TABLE `messages`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=28;

--
-- AUTO_INCREMENT for table `migrations`
--
ALTER TABLE `migrations`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=11;

--
-- AUTO_INCREMENT for table `personal_access_tokens`
--
ALTER TABLE `personal_access_tokens`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=2;

--
-- AUTO_INCREMENT for table `super_admins`
--
ALTER TABLE `super_admins`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=2;

--
-- AUTO_INCREMENT for table `users`
--
ALTER TABLE `users`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `u_users`
--
ALTER TABLE `u_users`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=6;

--
-- Constraints for dumped tables
--

--
-- Constraints for table `messages`
--
ALTER TABLE `messages`
  ADD CONSTRAINT `messages_conversation_id_foreign` FOREIGN KEY (`conversation_id`) REFERENCES `conversations` (`id`) ON DELETE CASCADE;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
